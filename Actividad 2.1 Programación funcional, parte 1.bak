#lang racket/base

; 1
; fahrenheit-to-celcius:
; Given: 
; Return: 
(define (fahrenheit-to-celcius F)
  (*(/ 5 9)(- F 32))
)

(fahrenheit-to-celcius 212)
(fahrenheit-to-celcius 32)
(fahrenheit-to-celcius -40)

; 2
; sign:
; Given:
; Return:

(define (sign n)
  (cond
    [(positive? n) 1]
    [(negative? n) -1]
    [else 0]
    )
  )

(sign -5)
(sign 10)
(sign 0)

; 3
; roots:
; Given:
; Return:

(define (roots a b c)
  (/ (- (sqrt (- (* b b) (* 4 a c)) ) b) (* 2 a))
  )

(roots 2 4 2)
(roots 1 0 0)
(roots 4 5 1)

; 4
; bmi:
; Given:
; Return:


; 5
; factorial:
; Given:
; Return:

(define (factorial n)
(if (zero? n) 1 (* n (factorial(- n 1))))
  )

(factorial 0)
(factorial 5)
(factorial 40)

; 6
; duplicate:
; Given:
; Return:

; 7
; pow:
; Given:
; Return:

; 8
; fib:
; Given:
; Return

; 9
; enlist:
; Given:
; Return:

; 10
; positives:
; Given:
; Return: